//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Mechanics/GameplayMechanics/InputManagement/Actions/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""9b7c3795-2ecf-4c3e-9be1-b3fa6db696b8"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""61ee67a4-1205-4e7a-9391-3ff5e0496fd2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponSelection1"",
                    ""type"": ""Button"",
                    ""id"": ""a756ec60-ed62-4d37-aa4e-e87488cbdcdf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponSelection2"",
                    ""type"": ""Button"",
                    ""id"": ""e49cf91d-058e-44a4-b479-92b69b6bf2a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponSelection3"",
                    ""type"": ""Button"",
                    ""id"": ""20167f1c-4285-4e0c-a10c-0e6c5d09b968"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponSelection4"",
                    ""type"": ""Button"",
                    ""id"": ""4df70b6e-b9d7-45ff-8fda-292b89e5a2cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""d5440216-eae0-40c3-9d4e-af4463ec4f45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldShoot"",
                    ""type"": ""PassThrough"",
                    ""id"": ""45a4d9e6-902b-42ad-bba6-035ac84cfa22"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""da6a1ba3-5627-47cf-9551-9ab0b7045276"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cb29bebd-c8f0-41cc-9ea2-d4d02da58082"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""74885bb0-53f5-4a8b-a5c5-b7636344d392"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""933ca8ae-1ccc-453f-891c-0ba1ca21268f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""PassThrough"",
                    ""id"": ""faf82b9a-9cb2-4041-ad15-1006fe92cce0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""63fa140e-470b-4daa-ae03-ca66b1b01297"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fd5ba6dc-e51a-4040-af28-c4dc0d5f7239"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""f0dd6be9-2299-4d2a-8594-9d0d62e989c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Info"",
                    ""type"": ""Button"",
                    ""id"": ""eda069cf-a5a4-4861-8f64-46ed7b94fb63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""83f68b77-bce9-4433-baa1-fef6581c4dc7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95e866db-405d-4e1e-b751-4439ede268c0"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""WeaponSelection1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb3b4764-bc93-48e6-ad60-db4e2c3ce982"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""WeaponSelection2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9244d21-5f90-4543-ad24-5339d2267c96"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""WeaponSelection3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3083a99-c395-4792-8dfe-d8ae8aa9ab63"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""WeaponSelection4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1944d177-fcb1-450d-aa30-b04b3cb9e129"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a92a20c3-7c30-49db-b657-c875ae760a14"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""HoldShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88ed4fa6-af7d-4605-b88b-cf733b8329e5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""f8a543cd-614d-4a4d-a091-0d7cd5fd107f"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9bcbb67d-dc82-43c4-b0be-def8841e3f15"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9123275f-0627-43ad-9a90-800fee6025f5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bead0c6a-9d9a-41b4-ba80-9d548a3a1bdb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1d2822b0-7d13-4257-b30f-020bbc7215da"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d0de34ac-8a3f-4c06-86db-9b8b2c66c7e2"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""552a4c2e-bcdf-47fd-b1fe-3e5d52c758d4"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""72ccf94b-fbe6-430f-8fcb-28a447fc73ea"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f503e3c5-4790-4142-b8a0-6798f751a405"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""15fefb60-2452-466a-9201-69537fae88d4"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd272f80-55de-4eae-a898-290e48eb4b99"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcc3cf1f-1373-4cce-a321-1412cc20199f"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),StickDeadzone,ScaleVector2(x=300,y=300)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""244c1ab9-c89f-46c1-b24b-69f3578181ac"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9324f654-bcf4-4825-9917-b3b9dad3864d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59270782-f7b2-48e6-9ac2-3cbbe49843be"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ae8eeb6-6756-44d8-8458-247689fb72d8"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8dbb494e-78b8-4a7d-b912-b2eddcd58b6a"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f04be5a-734f-4efb-93f0-43a13e58a564"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""133edb89-e4d4-4f46-8ecb-8f5daef0e263"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""766667c2-9c49-47db-9918-57d4101c77b5"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Info"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MachineGun"",
            ""id"": ""c0649b77-f47b-4880-97b5-70ac311511d5"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""e5eea988-c2c6-45ed-a2a4-bd8d5e769760"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldShoot"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d050b1d1-ae1c-4319-85dc-a7559986dcc0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""00928da7-c0e2-411f-80aa-a6acc669bd8c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cd8f334c-4bb2-4714-870f-1fd53b25d4d1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05ff8420-993e-4eb2-a14d-e89a47cc0613"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""HoldShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b5a51a7-43db-46f8-bb21-eb7554c50a00"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Global"",
            ""id"": ""17291687-e813-452a-871a-275cbc0099c6"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""d2db73bf-25ab-4345-ad2f-c2e4bb108ad2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a003aa22-cef7-4dd0-ad8b-0a09dd329516"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Shoot = m_Player.FindAction("Shoot", throwIfNotFound: true);
        m_Player_WeaponSelection1 = m_Player.FindAction("WeaponSelection1", throwIfNotFound: true);
        m_Player_WeaponSelection2 = m_Player.FindAction("WeaponSelection2", throwIfNotFound: true);
        m_Player_WeaponSelection3 = m_Player.FindAction("WeaponSelection3", throwIfNotFound: true);
        m_Player_WeaponSelection4 = m_Player.FindAction("WeaponSelection4", throwIfNotFound: true);
        m_Player_Reload = m_Player.FindAction("Reload", throwIfNotFound: true);
        m_Player_HoldShoot = m_Player.FindAction("HoldShoot", throwIfNotFound: true);
        m_Player_Use = m_Player.FindAction("Use", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Sprint = m_Player.FindAction("Sprint", throwIfNotFound: true);
        m_Player_Crouch = m_Player.FindAction("Crouch", throwIfNotFound: true);
        m_Player_Aim = m_Player.FindAction("Aim", throwIfNotFound: true);
        m_Player_Escape = m_Player.FindAction("Escape", throwIfNotFound: true);
        m_Player_Info = m_Player.FindAction("Info", throwIfNotFound: true);
        // MachineGun
        m_MachineGun = asset.FindActionMap("MachineGun", throwIfNotFound: true);
        m_MachineGun_Shoot = m_MachineGun.FindAction("Shoot", throwIfNotFound: true);
        m_MachineGun_HoldShoot = m_MachineGun.FindAction("HoldShoot", throwIfNotFound: true);
        m_MachineGun_Use = m_MachineGun.FindAction("Use", throwIfNotFound: true);
        // Global
        m_Global = asset.FindActionMap("Global", throwIfNotFound: true);
        m_Global_Escape = m_Global.FindAction("Escape", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Shoot;
    private readonly InputAction m_Player_WeaponSelection1;
    private readonly InputAction m_Player_WeaponSelection2;
    private readonly InputAction m_Player_WeaponSelection3;
    private readonly InputAction m_Player_WeaponSelection4;
    private readonly InputAction m_Player_Reload;
    private readonly InputAction m_Player_HoldShoot;
    private readonly InputAction m_Player_Use;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Sprint;
    private readonly InputAction m_Player_Crouch;
    private readonly InputAction m_Player_Aim;
    private readonly InputAction m_Player_Escape;
    private readonly InputAction m_Player_Info;
    public struct PlayerActions
    {
        private @InputMaster m_Wrapper;
        public PlayerActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Player_Shoot;
        public InputAction @WeaponSelection1 => m_Wrapper.m_Player_WeaponSelection1;
        public InputAction @WeaponSelection2 => m_Wrapper.m_Player_WeaponSelection2;
        public InputAction @WeaponSelection3 => m_Wrapper.m_Player_WeaponSelection3;
        public InputAction @WeaponSelection4 => m_Wrapper.m_Player_WeaponSelection4;
        public InputAction @Reload => m_Wrapper.m_Player_Reload;
        public InputAction @HoldShoot => m_Wrapper.m_Player_HoldShoot;
        public InputAction @Use => m_Wrapper.m_Player_Use;
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Sprint => m_Wrapper.m_Player_Sprint;
        public InputAction @Crouch => m_Wrapper.m_Player_Crouch;
        public InputAction @Aim => m_Wrapper.m_Player_Aim;
        public InputAction @Escape => m_Wrapper.m_Player_Escape;
        public InputAction @Info => m_Wrapper.m_Player_Info;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Shoot.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @WeaponSelection1.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeaponSelection1;
                @WeaponSelection1.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeaponSelection1;
                @WeaponSelection1.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeaponSelection1;
                @WeaponSelection2.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeaponSelection2;
                @WeaponSelection2.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeaponSelection2;
                @WeaponSelection2.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeaponSelection2;
                @WeaponSelection3.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeaponSelection3;
                @WeaponSelection3.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeaponSelection3;
                @WeaponSelection3.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeaponSelection3;
                @WeaponSelection4.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeaponSelection4;
                @WeaponSelection4.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeaponSelection4;
                @WeaponSelection4.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWeaponSelection4;
                @Reload.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReload;
                @HoldShoot.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHoldShoot;
                @HoldShoot.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHoldShoot;
                @HoldShoot.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHoldShoot;
                @Use.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUse;
                @Use.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUse;
                @Use.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUse;
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Sprint.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Crouch.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCrouch;
                @Aim.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAim;
                @Escape.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEscape;
                @Info.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInfo;
                @Info.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInfo;
                @Info.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInfo;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @WeaponSelection1.started += instance.OnWeaponSelection1;
                @WeaponSelection1.performed += instance.OnWeaponSelection1;
                @WeaponSelection1.canceled += instance.OnWeaponSelection1;
                @WeaponSelection2.started += instance.OnWeaponSelection2;
                @WeaponSelection2.performed += instance.OnWeaponSelection2;
                @WeaponSelection2.canceled += instance.OnWeaponSelection2;
                @WeaponSelection3.started += instance.OnWeaponSelection3;
                @WeaponSelection3.performed += instance.OnWeaponSelection3;
                @WeaponSelection3.canceled += instance.OnWeaponSelection3;
                @WeaponSelection4.started += instance.OnWeaponSelection4;
                @WeaponSelection4.performed += instance.OnWeaponSelection4;
                @WeaponSelection4.canceled += instance.OnWeaponSelection4;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @HoldShoot.started += instance.OnHoldShoot;
                @HoldShoot.performed += instance.OnHoldShoot;
                @HoldShoot.canceled += instance.OnHoldShoot;
                @Use.started += instance.OnUse;
                @Use.performed += instance.OnUse;
                @Use.canceled += instance.OnUse;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
                @Info.started += instance.OnInfo;
                @Info.performed += instance.OnInfo;
                @Info.canceled += instance.OnInfo;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // MachineGun
    private readonly InputActionMap m_MachineGun;
    private IMachineGunActions m_MachineGunActionsCallbackInterface;
    private readonly InputAction m_MachineGun_Shoot;
    private readonly InputAction m_MachineGun_HoldShoot;
    private readonly InputAction m_MachineGun_Use;
    public struct MachineGunActions
    {
        private @InputMaster m_Wrapper;
        public MachineGunActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_MachineGun_Shoot;
        public InputAction @HoldShoot => m_Wrapper.m_MachineGun_HoldShoot;
        public InputAction @Use => m_Wrapper.m_MachineGun_Use;
        public InputActionMap Get() { return m_Wrapper.m_MachineGun; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MachineGunActions set) { return set.Get(); }
        public void SetCallbacks(IMachineGunActions instance)
        {
            if (m_Wrapper.m_MachineGunActionsCallbackInterface != null)
            {
                @Shoot.started -= m_Wrapper.m_MachineGunActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_MachineGunActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_MachineGunActionsCallbackInterface.OnShoot;
                @HoldShoot.started -= m_Wrapper.m_MachineGunActionsCallbackInterface.OnHoldShoot;
                @HoldShoot.performed -= m_Wrapper.m_MachineGunActionsCallbackInterface.OnHoldShoot;
                @HoldShoot.canceled -= m_Wrapper.m_MachineGunActionsCallbackInterface.OnHoldShoot;
                @Use.started -= m_Wrapper.m_MachineGunActionsCallbackInterface.OnUse;
                @Use.performed -= m_Wrapper.m_MachineGunActionsCallbackInterface.OnUse;
                @Use.canceled -= m_Wrapper.m_MachineGunActionsCallbackInterface.OnUse;
            }
            m_Wrapper.m_MachineGunActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @HoldShoot.started += instance.OnHoldShoot;
                @HoldShoot.performed += instance.OnHoldShoot;
                @HoldShoot.canceled += instance.OnHoldShoot;
                @Use.started += instance.OnUse;
                @Use.performed += instance.OnUse;
                @Use.canceled += instance.OnUse;
            }
        }
    }
    public MachineGunActions @MachineGun => new MachineGunActions(this);

    // Global
    private readonly InputActionMap m_Global;
    private IGlobalActions m_GlobalActionsCallbackInterface;
    private readonly InputAction m_Global_Escape;
    public struct GlobalActions
    {
        private @InputMaster m_Wrapper;
        public GlobalActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_Global_Escape;
        public InputActionMap Get() { return m_Wrapper.m_Global; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalActions set) { return set.Get(); }
        public void SetCallbacks(IGlobalActions instance)
        {
            if (m_Wrapper.m_GlobalActionsCallbackInterface != null)
            {
                @Escape.started -= m_Wrapper.m_GlobalActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_GlobalActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_GlobalActionsCallbackInterface.OnEscape;
            }
            m_Wrapper.m_GlobalActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
            }
        }
    }
    public GlobalActions @Global => new GlobalActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnWeaponSelection1(InputAction.CallbackContext context);
        void OnWeaponSelection2(InputAction.CallbackContext context);
        void OnWeaponSelection3(InputAction.CallbackContext context);
        void OnWeaponSelection4(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnHoldShoot(InputAction.CallbackContext context);
        void OnUse(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnInfo(InputAction.CallbackContext context);
    }
    public interface IMachineGunActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnHoldShoot(InputAction.CallbackContext context);
        void OnUse(InputAction.CallbackContext context);
    }
    public interface IGlobalActions
    {
        void OnEscape(InputAction.CallbackContext context);
    }
}
